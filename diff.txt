index 0bbcb54..642b2ca 100644
--- a/skeleton/Skeleton.cpp
+++ b/skeleton/Skeleton.cpp
@@ -7,40 +7,82 @@
 #include "llvm/IR/IRBuilder.h"
 #include "llvm/Transforms/Utils/BasicBlockUtils.h"
 using namespace llvm;
-
 namespace {
-  struct SkeletonPass : public FunctionPass {
-    static char ID;
-    SkeletonPass() : FunctionPass(ID) {}
-
-    virtual bool runOnFunction(Function &F) {
-      for (auto &B : F) {
-        for (auto &I : B) {
-          if (auto *op = dyn_cast<BinaryOperator>(&I)) {
-            // Insert at the point where the instruction `op` appears.
-            IRBuilder<> builder(op);
-
-            // Make a multiply with the same operands as `op`.
-            Value *lhs = op->getOperand(0);
-            Value *rhs = op->getOperand(1);
-            Value *mul = builder.CreateMul(lhs, rhs);
-
-            // Everywhere the old instruction was used as an operand, use our
-            // new multiply instruction instead.
-            for (auto &U : op->uses()) {
-              User *user = U.getUser();  // A User is anything with operands.
-              user->setOperand(U.getOperandNo(), mul);
-            }
-
-            // We modified the code.
-            return true;
-          }
-        }
-      }
+	struct SkeletonPass : public FunctionPass {
+		static char ID;
+		int arith,branch,memory;
+		SkeletonPass() : FunctionPass(ID) {arith=0;branch=0;memory=0;}
 
-      return false;
-    }
-  };
+		virtual bool runOnFunction(Function &F) {
+			for (auto &B : F) {
+				for (auto &I : B) {
+					if (auto *op = dyn_cast<BinaryOperator>(&I)) {
+						arith++;
+					}
+					if (auto *op = dyn_cast<AllocaInst>(&I)) {
+						memory++;
+					}
+					if(auto *op = dyn_cast<LoadInst>(&I)) {
+						memory++;
+					}
+					if(auto *op = dyn_cast<StoreInst>(&I)) {
+						memory++;
+					}
+					if(auto *op = dyn_cast<AtomicCmpXchgInst>(&I)){
+						memory++;
+					}
+					if(auto *op = dyn_cast<AtomicRMWInst>(&I)) {
+						memory++;
+					}
+					if(auto *op = dyn_cast<FenceInst>(&I)) {
+						memory++;
+					}
+					if(auto *op = dyn_cast<GetElementPtrInst>(&I)) {
+						memory++;
+					}
+					if(auto *op = dyn_cast<ReturnInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<BranchInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<SwitchInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<IndirectBrInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<InvokeInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<ResumeInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<UnreachableInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<CleanupReturnInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<CatchReturnInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<CatchPadInst>(&I)) {
+						branch++;
+					}
+					if(auto *op = dyn_cast<CatchSwitchInst>(&I)) {
+						branch++;
+					}
+				}
+			}
+			errs() <<"*****"<< F.getName()<<"*****\n";
+			errs() << "Arithematic Operations:"<<arith<<"\n";
+			errs() << "Branch Operations:"<<branch<<"\n";
+			errs() << "Memory Operations:"<<memory<<"\n\n";
+			arith=0;branch=0;memory=0;
+			return false;
+		}
+	};
 }
 
 char SkeletonPass::ID = 0;
@@ -48,9 +90,9 @@ char SkeletonPass::ID = 0;
 // Automatically enable the pass.
 // http://adriansampson.net/blog/clangpass.html
 static void registerSkeletonPass(const PassManagerBuilder &,
-                         legacy::PassManagerBase &PM) {
-  PM.add(new SkeletonPass());
+		legacy::PassManagerBase &PM) {
+	PM.add(new SkeletonPass());
 }
-static RegisterStandardPasses
-  RegisterMyPass(PassManagerBuilder::EP_EarlyAsPossible,
-                 registerSkeletonPass);
+static RegisterPass<SkeletonPass> X("hello", "Hello World Pass",
+		false /* Only looks at CFG */,
+		false /* Analysis Pass */);
